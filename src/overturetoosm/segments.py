"""Pydantic models needed for transportation segments.

Partly autogenerated by datamodel-codegen.
"""

from enum import Enum
from typing import Any, List, Optional, Union

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import BaseModel, ConfigDict, Field, RootModel

from .objects import Names, Sources, Wikidata


class Subtype(str, Enum):
    """Model for transportation segment subtype."""

    road = "road"
    rail = "rail"
    water = "water"


class AccessType(str, Enum):
    """Model for transportation segment access type."""

    allowed = "allowed"
    denied = "denied"
    designated = "designated"


class Id(RootModel):
    """Model for transportation segment id.

    A feature ID. This may be an ID associated with the Global Entity Reference System
    (GERS) ifâ€”and-only-if the feature represents an entity that is part of GERS.
    """

    root: str


class Level(RootModel):
    """Model for transportation segment level."""

    root: int = Field(default=0)


class LinearlyReferencedPosition(RootModel):
    """Model for transportation segment linearly referenced position."""

    root: Annotated[float, Field(strict=True, ge=0.0, le=1.0)]


class LinearlyReferencedRange(RootModel):
    """Model for transportation segment linearly referenced range."""

    root: Annotated[list, Field(float, min_length=2, max_length=2)]


class RoadClass(str, Enum):
    """Model for transportation segment road class."""

    motorway = "motorway"
    primary = "primary"
    secondary = "secondary"
    tertiary = "tertiary"
    residential = "residential"
    living_street = "living_street"
    trunk = "trunk"
    unclassified = "unclassified"
    service = "service"
    pedestrian = "pedestrian"
    footway = "footway"
    steps = "steps"
    path = "path"
    track = "track"
    cycleway = "cycleway"
    bridleway = "bridleway"
    sidewalk = "sidewalk"
    crosswalk = "crosswalk"
    parking_aisle = "parking_aisle"
    driveway = "driveway"
    alley = "alley"
    cycle_crossing = "cycle_crossing"
    unknown = "unknown"


class Subclass(str, Enum):
    """Model for transportation segment subclass."""

    link = "link"
    sidewalk = "sidewalk"
    crosswalk = "crosswalk"
    parking_aisle = "parking_aisle"
    driveway = "driveway"
    alley = "alley"
    cycle_crossing = "cycle_crossing"


class TemporalScopeContainer(BaseModel):
    """Model for transportation segment temporal scope container."""

    during: Optional[Any] = None


class Heading(str, Enum):
    """Model for transportation segment heading."""

    forward = "forward"
    backward = "backward"


class PurposeOfUse(str, Enum):
    """Model for transportation segment purpose of use."""

    as_customer = "as_customer"
    at_destination = "at_destination"
    to_deliver = "to_deliver"
    to_farm = "to_farm"
    for_forestry = "for_forestry"


class RecognizedStatus(str, Enum):
    """Model for transportation segment recognized status."""

    as_permitted = "as_permitted"
    as_private = "as_private"
    as_disabled = "as_disabled"
    as_employee = "as_employee"
    as_student = "as_student"


class TravelMode(str, Enum):
    """Model for transportation segment travel mode."""

    vehicle = "vehicle"
    motor_vehicle = "motor_vehicle"
    car = "car"
    truck = "truck"
    motorcycle = "motorcycle"
    foot = "foot"
    bicycle = "bicycle"
    bus = "bus"
    hgv = "hgv"
    hov = "hov"
    emergency = "emergency"


class VehicleScopeComparison(str, Enum):
    """Model for transportation segment vehicle scope comparison."""

    greater_than = "greater_than"
    greater_than_equal = "greater_than_equal"
    equal = "equal"
    less_than = "less_than"
    less_than_equal = "less_than_equal"


class VehicleScopeDimension(str, Enum):
    """Model for transportation segment vehicle scope dimension."""

    axle_count = "axle_count"
    height = "height"
    length = "length"
    weight = "weight"
    width = "width"


class LengthUnit(str, Enum):
    """Model for transportation segment length unit."""

    in_ = "in"
    ft = "ft"
    yd = "yd"
    mi = "mi"
    cm = "cm"
    m = "m"
    km = "km"


class WeightUnit(str, Enum):
    """Model for transportation segment weight unit."""

    oz = "oz"
    lb = "lb"
    st = "st"
    lt = "lt"
    g = "g"
    kg = "kg"
    t = "t"


class Connector(BaseModel):
    """Model for transportation segment connector."""

    connector_id: Id
    at: LinearlyReferencedPosition


class LevelRules(BaseModel):
    """Model for transportation segment level rules container item."""

    value: Level
    between: Optional[LinearlyReferencedRange] = None


class Route(BaseModel):
    """Model for transportation segment route."""

    name: Optional[str] = Field(description="Full name of the route")
    network: Optional[str] = Field(
        description="Name of the highway system this route belongs to"
    )
    ref: Optional[str] = Field(description="Code or number used to reference the route")
    symbol: Optional[str] = Field(description="URL or description of route signage")
    wikidata: Optional[Wikidata] = None


class Routes(RootModel):
    """Model for transportation segment routes."""

    root: List[Route] = Field(description="Routes this segment belongs to.")


class HeadingScopeContainer(BaseModel):
    """Model for transportation segment heading scope container."""

    heading: Optional[Heading] = None


class PurposeOfUseScopeContainer(BaseModel):
    """Model for transportation segment purpose of use scope container."""

    using: Optional[List[PurposeOfUse]] = Field(None, min_length=1)


class RecognizedStatusScopeContainer(BaseModel):
    """Model for transportation segment recognized status scope container."""

    recognized: Optional[List[RecognizedStatus]] = Field(None, min_length=1)


class TravelModeScopeContainer(BaseModel):
    """Model for transportation segment travel mode scope container."""

    mode: Optional[List[TravelMode]] = Field(
        None, min_length=1, description="Travel mode(s) to which the rule applies"
    )


class VehicleScopeUnit(RootModel):
    """Model for transportation segment vehicle scope unit."""

    root: Union[LengthUnit, WeightUnit] = Field(
        description="Parent enum of both length and width for use in vehicle scoping"
    )


class VehicleItem(BaseModel):
    """Model for transportation segment vehicle item."""

    dimension: VehicleScopeDimension
    comparison: VehicleScopeComparison
    value: Annotated[float, Field(strict=True, ge=0.0)]
    unit: Optional[VehicleScopeUnit] = None


class VehicleScopeContainer(BaseModel):
    """Model for transportation segment vehicle scope container."""

    vehicle: Optional[List[VehicleItem]] = Field(
        None, min_length=1, description="Vehicle attributes for which the rule applies"
    )


class When(
    TemporalScopeContainer,
    HeadingScopeContainer,
    PurposeOfUseScopeContainer,
    RecognizedStatusScopeContainer,
    TravelModeScopeContainer,
    VehicleScopeContainer,
):
    """Model for transportation segment when."""


class AccessContainer(BaseModel):
    """Model for transportation segment access container item."""

    access_type: AccessType
    when: Optional[When] = None


class RoadFlagEnum(str, Enum):
    """Overture road flag options."""

    is_bridge = "is_bridge"
    is_link = "is_link"
    is_tunnel = "is_tunnel"
    is_under_construction = "is_under_construction"
    is_abandoned = "is_abandoned"
    is_covered = "is_covered"


class RoadFlag(BaseModel):
    """Overture road flag."""

    values: List[RoadFlagEnum]
    between: Optional[LinearlyReferencedRange] = None


class RoadSurfaceEnum(str, Enum):
    """Overture road surface options."""

    unknown = "unknown"
    paved = "paved"
    unpaved = "unpaved"
    gravel = "gravel"
    dirt = "dirt"
    paving_stones = "paving_stones"
    metal = "metal"


class RoadSurface(BaseModel):
    """Overture road surface."""

    value: RoadSurfaceEnum
    between: Optional[LinearlyReferencedRange] = None


class SpeedUnit(str, Enum):
    """Overture speed unit options."""

    kmh = "km/h"
    mph = "mph"


class Speed(BaseModel):
    """Overture speed."""

    value: Annotated[int, Field(ge=1, le=350)]
    unit: Optional[SpeedUnit] = None


class SpeedLimit(BaseModel):
    """Overture speed limit."""

    min_speed: Optional[Speed] = None
    max_speed: Speed


class Sequence(BaseModel):
    """Overture sequence."""

    connector_id: Id
    segment_id: Id


class ProhibitedTransition(BaseModel):
    """Overture prohibited transition."""

    sequence: List[Sequence]
    final_heading: Heading
    when: When
    between: Optional[LinearlyReferencedRange] = None


class SegmentProperties(BaseModel):
    """Model for transportation segment properties."""

    model_config = ConfigDict(extra="forbid")

    version: int = Field(
        ge=0,
        description="""Version number of the feature, incremented in each Overture
        release where the geometry or attributes of this feature changed.""",
    )
    id: Id
    subtype: Subtype = Field(description="Broad category of transportation segment.")
    sources: Optional[List[Sources]] = None
    class_: Optional[RoadClass] = Field(None, alias="class")
    access_restrictions: Optional[List[AccessContainer]] = Field(
        None, description="Rules governing access to this road segment or lane"
    )
    level: Optional[Level] = Field(
        0, description="Z-order of the feature where 0 is visual level"
    )
    level_rules: Optional[List[LevelRules]] = None
    connector_ids: Optional[List[Id]] = Field(
        None, min_length=2, description="** DEPRECATED **"
    )
    connectors: Optional[Annotated[List[Connector], Field(min_length=2)]] = Field([])
    """
    List of connectors which this segment is physically connected to and their relative
    location. Each connector is a possible routing decision point, meaning it defines a
    place along the segment in which there is possibility to transition to other
    segments which share the same connector.
    """
    road_surface: Optional[List[RoadSurface]] = None
    road_flags: Optional[List[RoadFlag]] = None
    speed_limits: Optional[List[SpeedLimit]] = None
    prohibited_transitions: Optional[List[ProhibitedTransition]] = None
    routes: Optional[Routes] = None
    names: Optional[Names] = None
